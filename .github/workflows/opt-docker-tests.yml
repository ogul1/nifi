# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# run nifi-toolkit docker build and tests before cleaning modules
# clean non-assembly modules before running Docker builds and delete unpacked binaries, otherwise we'll run out of disk space

name: Modified docker-tests
env:
  DEFAULT_MAVEN_OPTS: -Xmx4g -XX:ReservedCodeCacheSize=1g -XX:+UseG1GC -Dorg.slf4j.simpleLogger.defaultLogLevel=WARN
    -Daether.connector.http.retryHandler.count=5 -Daether.connector.http.connectionMaxTtl=30
  MAVEN_COMMAND: ./mvnw -V -nsu -ntp -ff
  MAVEN_BUILD_ARGUMENTS: -am -D skipTests -T 2.0C install
  MAVEN_BUILD_PROJECTS: -pl nifi-assembly -pl nifi-registry/nifi-registry-assembly
    -pl nifi-toolkit/nifi-toolkit-assembly -pl minifi/minifi-assembly
  MAVEN_CLEAN_ARGUMENTS: -T 2.0C clean
  MAVEN_CLEAN_PROJECTS: -pl -nifi-assembly -pl -nifi-registry/nifi-registry-assembly
    -pl -nifi-toolkit/nifi-toolkit-assembly -pl -nifi-toolkit/nifi-toolkit-cli -pl
    -minifi/minifi-assembly
  MAVEN_DOCKER_ARGUMENTS: verify -P docker
  MAVEN_DOCKER_PROJECTS: -pl minifi/minifi-docker -pl nifi-docker/dockermaven -pl
    nifi-registry/nifi-registry-docker-maven/dockermaven
permissions:
  contents: read
jobs:
  build_and_test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    name: build_and_test
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-build_and_test.csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/nifi/nifi', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - name: Checkout Code
      uses: actions/checkout@v4
    - run: touch optcd-3.txt
    - name: Set up Java Zulu 21
      uses: actions/setup-java@v4
      with:
        distribution: zulu
        java-version: 21
        cache: maven
    - run: touch optcd-4.txt
    - name: System Information
      run: |-
        hostname
        cat /proc/cpuinfo
        cat /proc/meminfo
        df
        docker info
    - run: touch optcd-5.txt
    - name: Build Assemblies
      env:
        MAVEN_OPTS: ${{ env.DEFAULT_MAVEN_OPTS }}
      run: |-
        ${{ env.MAVEN_COMMAND }} ${{ env.MAVEN_BUILD_ARGUMENTS }} ${{ env.MAVEN_BUILD_PROJECTS }}
    - run: touch optcd-6.txt
    - name: Run NiFi Toolkit Docker Tests
      env:
        MAVEN_OPTS: ${{ env.DEFAULT_MAVEN_OPTS }}
      run: |-
        ${{ env.MAVEN_COMMAND }} ${{ env.MAVEN_DOCKER_ARGUMENTS }} -pl nifi-toolkit/nifi-toolkit-assembly
    - run: touch optcd-7.txt
    - name: Clean Modules
      env:
        MAVEN_OPTS: ${{ env.DEFAULT_MAVEN_OPTS }}
      run: |-
        ${{ env.MAVEN_COMMAND }} ${{ env.MAVEN_CLEAN_ARGUMENTS }} ${{ env.MAVEN_CLEAN_PROJECTS }} && rm -rf nifi-assembly/target/nifi-*-bin/ nifi-registry/nifi-registry-assembly/target/nifi-registry-*-bin/ && rm -rf ~/.m2/repository/*
    - run: touch optcd-8.txt
    - name: Run Docker Tests
      env:
        MAVEN_OPTS: ${{ env.DEFAULT_MAVEN_OPTS }}
      run: |-
        ${{ env.MAVEN_COMMAND }} ${{ env.MAVEN_DOCKER_ARGUMENTS }} ${{ env.MAVEN_DOCKER_PROJECTS }}
    - run: touch optcd-9.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-build_and_test
        path: /home/runner/inotifywait-log-build_and_test.csv
'on':
- push
- workflow_dispatch
